// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2024 06:47:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ControleTemp
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControleTemp_vlg_sample_tst(
	clk,
	desativar,
	reset,
	temp_ac,
	temp_in,
	tipo,
	sampler_tx
);
input  clk;
input  desativar;
input  reset;
input [5:0] temp_ac;
input [5:0] temp_in;
input  tipo;
output sampler_tx;

reg sample;
time current_time;
always @(clk or desativar or reset or temp_ac or temp_in or tipo)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ControleTemp_vlg_check_tst (
	acionamento,
	display,
	segmentos,
	sol_dp_bug,
	sampler_rx
);
input  acionamento;
input [3:0] display;
input [6:0] segmentos;
input  sol_dp_bug;
input sampler_rx;

reg  acionamento_expected;
reg [3:0] display_expected;
reg [6:0] segmentos_expected;
reg  sol_dp_bug_expected;

reg  acionamento_prev;
reg [3:0] display_prev;
reg [6:0] segmentos_prev;
reg  sol_dp_bug_prev;

reg [3:0] display_expected_prev;
reg [6:0] segmentos_expected_prev;

reg [3:0] last_display_exp;
reg [6:0] last_segmentos_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	acionamento_prev = acionamento;
	display_prev = display;
	segmentos_prev = segmentos;
	sol_dp_bug_prev = sol_dp_bug;
end

// update expected /o prevs

always @(trigger)
begin
	display_expected_prev = display_expected;
	segmentos_expected_prev = segmentos_expected;
end


// expected segmentos[ 6 ]
initial
begin
	segmentos_expected[6] = 1'bX;
	segmentos_expected[6] = #13000 1'b0;
end 
// expected segmentos[ 5 ]
initial
begin
	segmentos_expected[5] = 1'bX;
	segmentos_expected[5] = #13000 1'b0;
end 
// expected segmentos[ 4 ]
initial
begin
	segmentos_expected[4] = 1'bX;
	segmentos_expected[4] = #13000 1'b0;
end 
// expected segmentos[ 3 ]
initial
begin
	segmentos_expected[3] = 1'bX;
	segmentos_expected[3] = #13000 1'b0;
end 
// expected segmentos[ 2 ]
initial
begin
	segmentos_expected[2] = 1'bX;
	segmentos_expected[2] = #13000 1'b0;
end 
// expected segmentos[ 1 ]
initial
begin
	segmentos_expected[1] = 1'bX;
	segmentos_expected[1] = #13000 1'b0;
end 
// expected segmentos[ 0 ]
initial
begin
	segmentos_expected[0] = 1'bX;
	segmentos_expected[0] = #13000 1'b0;
end 
// expected display[ 3 ]
initial
begin
	display_expected[3] = 1'bX;
end 
// expected display[ 2 ]
initial
begin
	display_expected[2] = 1'bX;
end 
// expected display[ 1 ]
initial
begin
	display_expected[1] = 1'bX;
end 
// expected display[ 0 ]
initial
begin
	display_expected[0] = 1'bX;
end 
// generate trigger
always @(acionamento_expected or acionamento or display_expected or display or segmentos_expected or segmentos or sol_dp_bug_expected or sol_dp_bug)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected acionamento = %b | expected display = %b | expected segmentos = %b | expected sol_dp_bug = %b | ",acionamento_expected_prev,display_expected_prev,segmentos_expected_prev,sol_dp_bug_expected_prev);
	$display("| real acionamento = %b | real display = %b | real segmentos = %b | real sol_dp_bug = %b | ",acionamento_prev,display_prev,segmentos_prev,sol_dp_bug_prev);
`endif
	if (
		( display_expected_prev[0] !== 1'bx ) && ( display_prev[0] !== display_expected_prev[0] )
		&& ((display_expected_prev[0] !== last_display_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[0] = display_expected_prev[0];
	end
	if (
		( display_expected_prev[1] !== 1'bx ) && ( display_prev[1] !== display_expected_prev[1] )
		&& ((display_expected_prev[1] !== last_display_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[1] = display_expected_prev[1];
	end
	if (
		( display_expected_prev[2] !== 1'bx ) && ( display_prev[2] !== display_expected_prev[2] )
		&& ((display_expected_prev[2] !== last_display_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[2] = display_expected_prev[2];
	end
	if (
		( display_expected_prev[3] !== 1'bx ) && ( display_prev[3] !== display_expected_prev[3] )
		&& ((display_expected_prev[3] !== last_display_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_expected_prev);
		$display ("     Real value = %b", display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_display_exp[3] = display_expected_prev[3];
	end
	if (
		( segmentos_expected_prev[0] !== 1'bx ) && ( segmentos_prev[0] !== segmentos_expected_prev[0] )
		&& ((segmentos_expected_prev[0] !== last_segmentos_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[0] = segmentos_expected_prev[0];
	end
	if (
		( segmentos_expected_prev[1] !== 1'bx ) && ( segmentos_prev[1] !== segmentos_expected_prev[1] )
		&& ((segmentos_expected_prev[1] !== last_segmentos_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[1] = segmentos_expected_prev[1];
	end
	if (
		( segmentos_expected_prev[2] !== 1'bx ) && ( segmentos_prev[2] !== segmentos_expected_prev[2] )
		&& ((segmentos_expected_prev[2] !== last_segmentos_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[2] = segmentos_expected_prev[2];
	end
	if (
		( segmentos_expected_prev[3] !== 1'bx ) && ( segmentos_prev[3] !== segmentos_expected_prev[3] )
		&& ((segmentos_expected_prev[3] !== last_segmentos_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[3] = segmentos_expected_prev[3];
	end
	if (
		( segmentos_expected_prev[4] !== 1'bx ) && ( segmentos_prev[4] !== segmentos_expected_prev[4] )
		&& ((segmentos_expected_prev[4] !== last_segmentos_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[4] = segmentos_expected_prev[4];
	end
	if (
		( segmentos_expected_prev[5] !== 1'bx ) && ( segmentos_prev[5] !== segmentos_expected_prev[5] )
		&& ((segmentos_expected_prev[5] !== last_segmentos_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[5] = segmentos_expected_prev[5];
	end
	if (
		( segmentos_expected_prev[6] !== 1'bx ) && ( segmentos_prev[6] !== segmentos_expected_prev[6] )
		&& ((segmentos_expected_prev[6] !== last_segmentos_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_expected_prev);
		$display ("     Real value = %b", segmentos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_exp[6] = segmentos_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ControleTemp_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg desativar;
reg reset;
reg [5:0] temp_ac;
reg [5:0] temp_in;
reg tipo;
// wires                                               
wire acionamento;
wire [3:0] display;
wire [6:0] segmentos;
wire sol_dp_bug;

wire sampler;                             

// assign statements (if any)                          
ControleTemp i1 (
// port map - connection between master ports and signals/registers   
	.acionamento(acionamento),
	.clk(clk),
	.desativar(desativar),
	.display(display),
	.reset(reset),
	.segmentos(segmentos),
	.sol_dp_bug(sol_dp_bug),
	.temp_ac(temp_ac),
	.temp_in(temp_in),
	.tipo(tipo)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// temp_in[ 5 ]
initial
begin
	temp_in[5] = 1'b1;
end 
// temp_in[ 4 ]
initial
begin
	temp_in[4] = 1'b0;
end 
// temp_in[ 3 ]
initial
begin
	temp_in[3] = 1'b1;
end 
// temp_in[ 2 ]
initial
begin
	temp_in[2] = 1'b0;
end 
// temp_in[ 1 ]
initial
begin
	temp_in[1] = 1'b0;
end 
// temp_in[ 0 ]
initial
begin
	temp_in[0] = 1'b0;
end 
// temp_ac[ 5 ]
initial
begin
	temp_ac[5] = 1'b1;
end 
// temp_ac[ 4 ]
initial
begin
	temp_ac[4] = 1'b0;
end 
// temp_ac[ 3 ]
initial
begin
	temp_ac[3] = 1'b1;
end 
// temp_ac[ 2 ]
initial
begin
	temp_ac[2] = 1'b0;
end 
// temp_ac[ 1 ]
initial
begin
	temp_ac[1] = 1'b0;
end 
// temp_ac[ 0 ]
initial
begin
	temp_ac[0] = 1'b0;
end 

ControleTemp_vlg_sample_tst tb_sample (
	.clk(clk),
	.desativar(desativar),
	.reset(reset),
	.temp_ac(temp_ac),
	.temp_in(temp_in),
	.tipo(tipo),
	.sampler_tx(sampler)
);

ControleTemp_vlg_check_tst tb_out(
	.acionamento(acionamento),
	.display(display),
	.segmentos(segmentos),
	.sol_dp_bug(sol_dp_bug),
	.sampler_rx(sampler)
);
endmodule

